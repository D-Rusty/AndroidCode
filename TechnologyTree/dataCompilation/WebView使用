1.webView与JS交互
    webview 调用JS      webView.loadUrl("javascript:xxx")
    JS调用WebView       1. 通过addJavaScriptInterface给JS提供一个调用接口，在通过JavaScrpitInterface标记可以被JS调用的方法

2.WebViewClient的使用
    1. 重写 shouldOverrideUrlLoading  在点击请求连接时，可以设定新打开的连接是否脱离本地uri执行，可以在这里处理待httpUrl
    2. 重写 onReceivedSslError 可以处理webview是否能够继续加载有ssl问题的HTML
    3. 重写 onPageStarted，onPageFinsh操作可以做一些初始化，或者其它操作如下载apk
    4. 重写 shouldInterceptRequest 方法在此方法里面，通过WebResourceResponse做资源缓存操作
3.WebView 缓存的处理
    1.缓存构成
        /data/data/package_name/cache/
        /data/data/package_name/database/webview.db
        /data/data/package_name/database/webviewCache.db
    2.缓存的五种模式
        LOAD_CACHE_ONLY:  不使用网络，只读取本地缓存数据
        LOAD_DEFAULT:  根据cache-control决定是否从网络上取数据。
        LOAD_CACHE_NORMAL: API level 17中已经废弃, 从API level 11开始作用同LOAD_DEFAULT模式
        LOAD_NO_CACHE: 不使用缓存，只从网络获取数据.
        LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。
    3. 清除缓存  clearCache(boolean)
    4. 根据 setAppCachePath(String appCachePath) 提供的路径，在H5使用缓存过程中生成的缓存文件
    5. 无模式选择，通过 setAppCacheEnabled(boolean flag) 设置是否打开。默认关闭，即，H5的缓存无法使用。
    6. 找到调用 setAppCachePath(String appCachePath) 设置缓存的路径，把它下面的文件全部删除就OK了。
    7. 通过 setAppCacheMaxSize(long appCacheMaxSize) 设置缓存最大容量，默认为Max Integer
    8. setDomStorageEnabled(true); 打开浏览器缓存机制