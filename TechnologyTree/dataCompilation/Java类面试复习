# Java基础
## 常识性内容
  * Java程序运行机制
  > Java语言是一种特殊的高级语言,它既具有解释型语言的特征,也具有编译型语言的特征,Java程序需要经过先编译,后解释两个步骤。
  > 计算机高级语言按程序的执行方式可以分为编译型和解释型两种
  >> 编译型语言是指使用专门的编译器,针对特定的平台(操作系统)将某种高级语言源代码一次性"翻译"成可被该平台硬件执行的机器码,并包装成该平台所能识别的可执行
     性程序的格式,编译生成的可执行程序可以脱离开发环境,在特定的平台上独立运行,通常运行效率高,但是因为编译型语言只能在特定平台上运行通常无法移植到其它平台。
  
  >> 解释行语言是指使用专门的解释器对源程序进行逐行解释成特定平台的机器码并立即执行的语言,解释型语言效率较低,解释型语言相当于把编译型语言中的编译和解释过程混合到一起完成,
     解释行语言不能离开特定平台运行,但是可移植性大,跨平台方便
  
  * Java程序的运行机制和JVM
  > Java源文件 通过特定的编译器 javac 编译生成 *.class文件(字节码文件),然后使用java(JVM)解释执行字节码文件为特定平台的机器码
  
  * Java程序的基本规则
  > Java程序是一种纯粹的面向对象的程序设计语言,因此Java程序必须以类(class)的形式存在,类(class)是Java程序的最小程序单元,Java程序不允许可执行语句,方法等成分独立存在,所有的程序部分都必须放在类定义里。
  
  * 对Java面向对象的理解
  > 结构化程序设计简介
    结构化程序设计方法主张按功能来分析系统需求,其主要原则可概括为自顶向下,逐步求精,模块化等,结构化程序设计首先采用结构化分析(SA)方法对系统进行需求分析,然后使用结构化设计(SD)方法对系统进行该要设计、详细设计
    ,最后采用结构化编程(SP)方法来实现系统。
  >> 因为结构化程序设计方法主张按功能把软件系统逐步细分,因此这种方法也被称为面向功能的程序设计方法,结构化程序设计里最小的程序单元是函数,每个函数都负责完成一个功能
     ,用以接收一些数据输入,函数负责对这些数据进行处理,进行输入,输出处理,函数是结构化程序设计方法里面最小单元
  >> 程序的三种基本结构是顺序结构,循环结构,选择结构
  
  > 面向对象程序设计简介
  >> 它的基本思想: 使用类、对象、封装、消息、继承等基本概念进行程序设计,采用面向对象方式开发的软件系统,其最小的程序单元是类。
  >> 基本特征: 封装,继承和多态
  >> 面向对象基本概念:
     1. 对象是面向对象方法中最基本的概念,它的基本特点有:标识唯一性、分类性、多态性、封装性、模块独立性好
     2. 类是具有共同属性,共同方法的一类事物,类是对象的抽象,对象则是类的实例,而类是整个软件系统最小的程序单元
     3. 对象间的这种相互合作需要一个机制协助进行,这样的机制称为 "消息" 消息是实例之间通信的机制
     4. 在面向对象方法中,类之间共享属性和操作的机制称为继承,继承分为单继承和多继承
  
## 基本语法
  * 单行,多行注释语法
  * 8种基本类型及各自的注意点
  * Java提供的基本运算符
  
  > 算术运算符
  >> 加,减,乘,除和取余
  
  > 赋值运算符
  >> =
  
  > 比较运算符
  >> >,>=,<,<=,==,!=
  
  > 逻辑运算符
  >> && & || | ! ^
  
  > 位运算符
  >> &: 按位与,当两位同时为1时才返回1
     |: 按位或,只要有一位为即可返回1
     ~: 按位非,单目运算符,将操作数的每个位(包括符号位)全部取反
     ^: 按位异或,当两位想同时返回0,不同时返回1
     <<: 左移运算符
     \>\>: 右移运算符
     \>\>\>: 无符号右移运算符
     
  >> 进行移位运算符时还要遵循如下规则
     1. 对于低于int类型(如byte,short和char)的操作数总是先自动类型转换为int类型后在移位
     2. 对于int类型的整数移位a>>b,当b>32时,系统先用b对32求余,得到的结果才是真正移位的位数
     3. 对于long类型的整数移位a>>b,当b>64时,总是先用b对64求余
     
  * 运算符的结合性和优先级
  > 所有的数序运算都认为是从左向右运算的,只有单目运算符,赋值运算符和三目运算符例外(从右向左)
  
  * if分支结构
  * switch 分支语句
  * while循环
  * do while循环
  * for 循环
  * 嵌套循环
  * 控制循环结构
  * 数组的定义,初始化
 
 * 抽象类(abstract class)和接口(interface)有什么区别?
 
 * 常用类库API
 > StringBuild,Date,日历,System

## Java高级知识
  
 * Annotation
   起的就是一个注解的作用,常见的anotation Override,Deprecated,SuppressWarnings
   包装流
 * IO和NIO,AIO
   需要通过一个线程管理一组客户端时使用
  -多线程、线程池
  -阻塞、非阻塞
   异步网络通信
  -反射、动态代理
  -并发
  -算法
  -数据结构
  
  
  
  存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么？如 C = (C) B；(answer答案)
  
  哪个类包含 clone 方法？是 Cloneable 还是 Object？(答案)
  java.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在 object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的。
  
  a = a + b 与 a += b 的区别(答案)
  += 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两这个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。如果加法操作的结果比 a 的最大值要大，则 a+b 会出现编译错误，但是 a += b 没问题，如下：
  
  Java 中 WeakReference 与 SoftReference的区别？(答案)
  虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候。
  
  
  WeakHashMap 是怎么工作的？(答案)
  WeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。
  
  JRE、JDK、JVM 及 JIT 之间有什么不同？(答案)
  JRE 代表 Java 运行时（Java run-time），是运行 Java 引用所必须的。JDK 代表 Java 开发工具（Java development kit），是 Java 程序的开发工具，如 Java 编译器，它也包含 JRE。JVM 代表 Java 虚拟机（Java virtual machine），它的责任是运行 Java 应用。JIT 代表即时编译（Just In Time compilation），当代码执行的次数超过一定的阈值时，会将 Java 字节码转换为本地代码，如，主要的热点代码会被准换为本地代码，这样有利大幅度提高 Java 应用的性能。
  
  Java 中堆和栈有什么区别？(答案)
  JVM 中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法帧和局部变量，而对象总是在堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。
  
  a.hashCode() 有什么用？与 a.equals(b) 有什么关系？(答案)
  hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equal() 方法来判断相等的对象，必须具有相同的 hash code。
  
  final、finalize 和 finally 的不同之处？(答案)
  final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。
  
  Java 中的编译期常量是什么？使用它又什么风险？
  公共静态不可变（public static final ）变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。
  
  
  Java 中，编写多线程程序的时候你会遵循哪些最佳实践？(答案)
  这是我在写Java 并发程序的时候遵循的一些最佳实践：
  a）给线程命名，这样可以帮助调试。
  b）最小化同步的范围，而不是将整个方法同步，只对关键部分做同步。
  c）如果可以，更偏向于使用 volatile 而不是 synchronized。
  d）使用更高层次的并发工具，而不是使用 wait() 和 notify() 来实现线程间通信，如 BlockingQueue，CountDownLatch 及 Semeaphore。
  e）优先使用并发集合，而不是对集合进行同步。并发集合提供更好的可扩展性。
  
  

  
  
  类的内部可以有多个嵌套公共静态类，但是一个 Java 源文件只能有一个顶级公共类，并且顶级公共类的名称与源文件名称必须一致。
  


  Objecty有哪些公用方法
   1.clone,getClass,toString,finalize,equals,hashCode

   Hashcode的作用。

  http://c610367182.iteye.com/blog/1930676

  以Java.lang.Object来理解,JVM每new一个Object,它都会将这个Object丢到一个Hash哈希表中去,这样的话,下次做Object的比较或者取这个对象的时候,它会根据对象的hashcode再从Hash表中取这个对象。这样做的目的是提高取对象的效率。具体过程是这样:

  new Object(),JVM根据这个对象的Hashcode值,放入到对应的Hash表对应的Key上,如果不同的对象确产生了相同的hash值,也就是发生了Hash key相同导致冲突的情况,那么就在这个Hash key的地方产生一个链表,将所有产生相同hashcode的对象放到这个单链表上去,串在一起。

  比较两个对象的时候,首先根据他们的hashcode去hash表中找他的对象,当两个对象的hashcode相同,那么就是说他们这两个对象放在Hash表中的同一个key上,那么他们一定在这个key上的链表上。那么此时就只能根据Object的equal方法来比较这个对象是否equal。当两个对象的hashcode不同的话，肯定他们不能equal.


  
  http://www.importnew.com/17232.html





String、StringBuffer与StringBuilder的区别。


  Java 平台提供了两种类型的字符串：String和StringBuffer / StringBuilder，它们可以储存和操作字符串。其中String是只读字符串，也就意味着String引用的字符串内容是不能
被改变的。而StringBuffer和StringBulder类表示的字符串对象可以直接进行修改。StringBuilder是JDK1.5引入的，它和StringBuffer的方法完全相同，区别在于它是单线程环境下使用
的，因为它的所有方面都没有被synchronized修饰，因此它的效率也比StringBuffer略高。


Excption与Error包结构，OOM你遇到过哪些情况，SOF你遇到过哪些情况

Throwable Throwable是 Java 语言中所有错误或异常的超类。 Throwable包含两个子类: Error 和 Exception 。它们通常用于指示发生了异常情况。
Throwable包含了其线程创建时线程执行堆栈的快照，它提供了printStackTrace()等接口用于获取堆栈跟踪数据等信息。

Exception Exception及其子类是 Throwable 的一种形式，它指出了合理的应用程序想要捕获的条件。

RuntimeException RuntimeException是那些可能在 Java 虚拟机正常运行期间抛出的异常的超类。 编译器不会检查RuntimeException异常。 例如，除数为零时，
抛出ArithmeticException异常。RuntimeException是ArithmeticException的超类。当代码发生除数为零的情况时，倘若既"没有通过throws声明抛出ArithmeticException异常"，
也"没有通过try...catch...处理该异常"，也能通过编译。这就是我们所说的"编译器不会检查RuntimeException异常"！ 如果代码会产生RuntimeException异常，则需要通过修改代码进
行避免。 例如，若会发生除数为零的情况，则需要通过代码避免该情况的发生！

Error 和Exception一样， Error也是Throwable的子类。 它用于指示合理的应用程序不应该试图捕获的严重问题，大多数这样的错误都是异常条件。 和RuntimeException一样，
 编译器也不会检查Error。

Java将可抛出(Throwable)的结构分为三种类型： 被检查的异常(Checked Exception)，运行时异常(RuntimeException)和错误(Error)。
(01) 运行时异常 定义 : RuntimeException及其子类都被称为运行时异常。 特点 : Java编译器不会检查它。 也就是说，当程序中可能出现这类异常时，倘若既"没有通过throws声明抛出
     它"，也"没有用try-catch语句捕获它"，还是会编译通过。例如，除数为零时产生的ArithmeticException异常，数组越界时产生的IndexOutOfBoundsException异常，
     fail-fail机制产生的ConcurrentModificationException异常等，都属于运行时异常。 虽然Java编译器不会检查运行时异常，但是我们也可以通过throws进行声明抛出，
     也可以通过try-catch对它进行捕获处理。 如果产生运行时异常，则需要通过修改代码来进行避免。 例如，若会发生除数为零的情况，则需要通过代码避免该情况的发生！

(02) 被检查的异常 定义 : Exception类本身，以及Exception的子类中除了"运行时异常"之外的其它子类都属于被检查异常。 特点 : Java编译器会检查它。 此类异常，
     要么通过throws进行声明抛出，要么通过try-catch进行捕获处理，否则不能通过编译。例如，CloneNotSupportedException就属于被检查异常。当通过clone()接口去克隆一个对象，
     而该对象对应的类没有实现Cloneable接口，就会抛出CloneNotSupportedException异常。 被检查异常通常都是可以恢复的。

(03) 错误 定义 : Error类及其子类。 特点 : 和运行时异常一样，编译器也不会对错误进行检查。 当资源不足、约束失败、或是其它程序无法继续运行的条件发生时，就产生错误。
     程序本身无法修复这些错误的。例如，VirtualMachineError就属于错误。 按照Java惯例，我们是不应该是实现任何新的Error子类的！


OOM：

     OutOfMemoryError异常

     除了程序计数器外，虚拟机内存的其他几个运行时区域都有发生OutOfMemoryError(OOM)异常的可能，

     Java Heap 溢出

     一般的异常信息：java.lang.OutOfMemoryError:Java heap spacess

     java堆用于存储对象实例，我们只要不断的创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，就会在对象数量达到最大堆容量
     限制后产生内存溢出异常。

     出现这种异常，一般手段是先通过内存映像分析工具(如Eclipse Memory Analyzer)对dump出来的堆转存快照进行分析，重点是确认内存中的对象是否是必要的，
     先分清是因为内存泄漏(Memory Leak)还是内存溢出(Memory Overflow)。

     如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots的引用链。于是就能找到泄漏对象时通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收。

     如果不存在泄漏，那就应该检查虚拟机的参数(-Xmx与-Xms)的设置是否适当。

     虚拟机栈和本地方法栈溢出

     如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。

     如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常

     这里需要注意当栈的大小越大可分配的线程数就越少。

     运行时常量池溢出

     异常信息：java.lang.OutOfMemoryError:PermGen space

     如果要向运行时常量池中添加内容，最简单的做法就是使用String.intern()这个Native方法。该方法的作用是：如果池中已经包含一个等于此String的字符串，则返回代表池中这个字符串的String对象；否则，将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。由于常量池分配在方法区内，我们可以通过-XX:PermSize和-XX:MaxPermSize限制方法区的大小，从而间接限制其中常量池的容量。

     方法区溢出

     方法区用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。

     异常信息：java.lang.OutOfMemoryError:PermGen space

     方法区溢出也是一种常见的内存溢出异常，一个类如果要被垃圾收集器回收，判定条件是很苛刻的。在经常动态生成大量Class的应用中，要特别注意这点。


Java面向对象的三个特征与含义：
  继承：继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。
       继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段。

  封装：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。面向对象的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是
       对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的
       差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。

  多态：多态性是指允许不同子类型的对象对同一消息作出不同的响应。简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。多态性分为编译时的多态性和运行时的多态性。
       如果将对象的方法视为对象向外界提供的服务，那么运行时的多态性可以解释为：当A系统访问B系统提供的服务时，B系统有多种提供服务的方式，但一切对A系统来说都是透明的
       （就像电动剃须刀是A系统，它的供电系统是B系统，B系统可以使用电池供电或者用交流电，甚至还有可能是太阳能，A系统只会通过B类对象调用供电的方法，但并不知道供电系统的底层实
       现是什么，究竟通过何种方式获得了动力）。方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）。
       运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：1. 方法重写（子类继承父类并重写父类中已有的或抽象的方法）；2. 对象造型（用父类型引用引用子类型对象，
       这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。

  Override和Overload的含义与区别。

       Overload：顾名思义，就是Over(重新)——load（加载），所以中文名称是重载。它可以表现类的多态性，可以是函数里面可以有相同的函数名但是参数名、类型不能相同；
                 或者说可以改变参数、类型但是函数名字依然不变。

       Override：就是ride(重写)的意思，在子类继承父类的时候子类中可以定义某方法与其父类有相同的名称和参数，当子类在调用这一函数时自动调用子类的方法，而父类相当于被
                 覆盖（重写）了。

       方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。
       如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被
       “屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。Overloaded的方法是可以改变返回值的类型

    Interface与abstract类的区别。

      抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要
      被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是
      private、默认、protected、public的，而接口中的成员全都是public的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象
      类，而抽象类未必要有抽象方法。

    Static class 与non static class的区别。

     内部静态类不需要有指向外部类的引用。但非静态内部类需要持有对外部类的引用。非静态内部类能够访问外部类的静态和非静态成员。静态类不能访问外部类的非静态成员。
     他只能访问外部类的静态成员。一个非静态内部类不能脱离外部类实体被创建，一个非静态内部类可以访问外部类的数据和方法，因为他就在外部类里面。

java多态的实现原理：
     当JVM执行Java字节码时，类型信息会存储在方法区中，为了优化对象的调用方法的速度，方法区的类型信息会增加一个指针，该指针指向一个记录该类方法的方法表，方法表中的每一个
     项都是对应方法的指针

     方法区：方法区和JAVA堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据，
     运行时常量池：它是方法区的一部分，Class文件中除了有类的版本、方法、字段等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种符号引用，这部分信息在类加载
     时进入方法区的运行时常量池中。 方法区的内存回收目标是针对常量池的回收及对类型的卸载。

方法表的构造

     由于java的单继承机制，一个类只能继承一个父类，而所有的类又都继承Object类，方法表中最先存放的是Object的方法，接下来是父类的方法，最后是该类本身的方法。如果子类改写了
     父类的方法，那么子类和父类的那些同名的方法共享一个方法表项。

     由于这样的特性，使得方法表的偏移量总是固定的，例如，对于任何类来说，其方法表的equals方法的偏移量总是一个定值，所有继承父类的子类的方法表中，其父类所定义的方法的偏移量
     也总是一个定值。

     实例
          假设Class A是Class B的子类，并且A改写了B的方法的method()，那么B来说，method方法的指针指向B的method方法入口；对于A来说，A的方法表的method项指向自身的
          method而非父类的。

     流程：调用方法时，虚拟机通过对象引用得到方法区中类型信息的方法表的指针入口，查询类的方法表 ，根据实例方法的符号引用解析出该方法在方法表的偏移量，
          子类对象声明为父类类型时，形式上调用的是父类的方法，此时虚拟机会从实际的方法表中找到方法地址，从而定位到实际类的方法。 注：所有引用为父类，但方法区的类型信息中
          存放的是子类的信息，所以调用的是子类的方法表。


  反射机制

          JAVA反射机制是在运行状态中, 对于任意一个类, 都能够知道这个类的所有属性和方法; 对于任意一个对象, 都能够调用它的任意一个方法和属性; 这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制.

          主要作用有三：

          运行时取得类的方法和字段的相关信息。

          创建某个类的新实例(.newInstance())

          取得字段引用直接获取和设置对象字段，无论访问修饰符是什么。

          用处如下：

          观察或操作应用程序的运行时行为。

          调试或测试程序，因为可以直接访问方法、构造函数和成员字段。

          通过名字调用不知道的方法并使用该信息来创建对象和调用方法。

   泛型常用特点，List<String>能否转为List<Object>

          能，但是利用类都继承自Object，所以使用是每次调用里面的函数都要通过强制转换还原回原来的类，这样既不安全，运行速度也慢。




  
  