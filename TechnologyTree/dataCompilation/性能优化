应用UI性能问题(卡顿)分析：
    1.Android流畅的帧率规定为60fps
    2.尽量保证每次在16ms内处理完所有的CPU与GPU计算，绘制，渲染等操作，否则会造成丢帧卡顿问题。

    UI卡顿常见原因:
       人为在UI线程中做轻微耗时操作，导致UI线程卡顿
       布局Layout过于复杂，无法在16ms内完成渲染
       同一时间动画执行的次数过度，导致CPU或GPU负载过重
       View频繁的重新渲染触发measure，layout，导致measure，layout累计耗时过多
       大量对象的创建与释放会产生GC频繁调用，GC线程运行时其它包括UI线程全部得暂停所以会产生卡顿
       冗余资源及逻辑等导致加载和执行缓慢。

    解决方法
        1.使用HierarchyViewer分析UI 红黄代表view渲染速度较慢
        2.使用GPU过度绘制来检查UI绘制情况最理想情况是蓝色，最严重就是红色了我们可以依据颜色分布进行代码优化，布局层级优化
        3.使用Lint进行资源及冗余UI布局等优化
        4.使用Memory检测及GC打印与Allocation Tracker进行UI卡顿分析
        5.使用Traceview和dmtracedump进行分析优化，Traceview他是一个分析器，记录了应用程序每个函数的执行时间


    用于避免UI卡顿性能问题注意点如下:
        布局优化，尽量使用include,merge,ViewStub标签
        尽量使用GONE替换INVISIBLE，使用weight后尽量将width和heigh设置为0dp减少运算，Item存在非常复杂的嵌套时考虑使用自定义Item View来取代，减少measure与layout次数等。
        列表及Adapter优化；尽量复用getView方法中的相关View，不重复获取实例导致卡顿，列表尽量在滑动过程中不进行UI元素刷新等。
        背景和图片等内存分配优化；尽量减少不必要的背景设置，图片尽量压缩处理显示，尽量避免频繁内存抖动等问题出现。
        自定义View等绘图与布局优化；尽量避免在draw、measure、layout中做过于耗时及耗内存操作，尤其是draw方法中，尽量减少draw、measure、layout等执行次数。
        避免ANR，不要在UI线程中做耗时操作，遵守ANR规避守则，譬如多次数据库操作等。



Android应用开发规避内存泄露建议


1.Context使用不当造成内存泄露；不要对一个Activity Context保持长生命周期的引用（譬如上面概念部分给出的示例）。
  尽量在一切可以使用应用ApplicationContext代替Context的地方进行替换。
2.非静态内部类的静态实例容易造成内存泄漏；即一个类中如果你不能够控制它其中内部类的生命周期（譬如Activity中的一些特殊Handler等），则尽量使用静态类和弱引用来处理（譬如ViewRoot的实现）。
3.警惕线程未终止造成的内存泄露；譬如在Activity中关联了一个生命周期超过Activity的Thread，在退出Activity时切记结束线程。一个典型的例子就是HandlerThread的run方法是一个死循环，它不会自己结束，
    线程的生命周期超过了Activity生命周期，我们必须手动在Activity的销毁方法中中调运thread.getLooper().quit();才不会泄露。
4.对象的注册与反注册没有成对出现造成的内存泄露；譬如注册广播接收器、注册观察者（典型的譬如数据库的监听）等。
5.创建与关闭没有成对出现造成的泄露；譬如Cursor资源必须手动关闭，WebView必须手动销毁，流等对象必须手动关闭等。
6.不要在执行频率很高的方法或者循环中创建对象，可以使用HashTable等创建一组对象容器从容器中取那些对象，而不用每次new与释放。
7.避免代码设计模式的错误造成内存泄露。


Android应用规避内存溢出OOM建议
1.时刻记得不要加载过大的Bitmap对象；譬如对于类似图片加载我们要通过BitmapFactory.Options设置图片的一些采样比率和复用等，具体做法点我参考官方文档，不过过我们一般都用fresco或Glide开源库进行加载。

2.优化界面交互过程中频繁的内存使用；譬如在列表等操作中只加载可见区域的Bitmap、滑动时不加载、停止滑动后再开始加载。

3.有些地方避免使用强引用，替换为弱引用等操作。

4.避免各种内存泄露的存在导致OOM。

5.对批量加载等操作进行缓存设计，譬如列表图片显示，Adapter的convertView缓存等。

6.尽可能的复用资源；譬如系统本身有很多字符串、颜色、图片、动画、样式以及简单布局等资源可供我们直接使用，我们自己也要尽量复用style等资源达到节约内存。

7.对于有缓存等存在的应用尽量实现onLowMemory()和onTrimMemory()方法。

8.尽量使用线程池替代多线程操作，这样可以节约内存及CPU占用率。

9.尽量管理好自己的Service、Thread等后台的生命周期，不要浪费内存占用。

10.尽量在做一些大内存分配等可疑内存操作时进行try catch操作，避免不必要的应用闪退。

11.尽量的优化自己的代码，减少冗余，进行编译打包等优化对齐处理，避免类加载时浪费内存。


Android应用逻辑优化建议:
    避免在Android中使用Java的枚举类型，因为编译后不但占空间，加载也费时，完全没有static final的变量好用、高效。
    Handler发送消息时尽量使用obtain去获取已经存在的Message对象进行复用，而不是新new Message对象，这样可以减轻内存压力
    在使用后台Service时尽量将能够替换为IntentService的地方替换为此，这样可以减轻系统压力、省电、省内存、省CPU占用率
    在当前类内部尽量不要通过自己的getXXX、setXXX对自己内部成员进行操作，而是直接使用，这样可以提高代码执行效率。
    尽量减少锁个数、减小锁范围，避免造成性能问题
    合理的选择使用for循环与增强型for循环，譬如不要在ArrayList上使用增强型for循环等
    Android应用HashMap与ArrayMap及SparseArray优化建议:
    SparseArray比HashMap省内存是因为它避免了对Key进行自动装箱（int转Integer），它内部是用两个数组来进行数据存储的
        （一个存Key，一个存Value），它内部对数据采用了压缩方式来表示稀疏数组数据，从而节约内存空间，而且其查找节点的实现采用了二分法
        当界面不可见时释放内存
        当内存紧张时释放内存
        避免在Bitmap上浪费内存
        使用经过优化过的数据集合

如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。
在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。
当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。
基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。
尽可能地少创建临时对象，越少的对象意味着越少的GC操作。
     如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，
       调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)




移动端获取网络数据优化的几个点

连接复用：节省连接建立时间，如开启 keep-alive。
对于Android来说默认情况下HttpURLConnection和HttpClient都开启了keep-alive。只是2.2之前HttpURLConnection存在影响连接池的Bug，具体可见：Android HttpURLConnection及HttpClient选择

请求合并：即将多个请求合并为一个进行请求，比较常见的就是网页中的CSS Image Sprites。如果某个页面内请求过多，也可以考虑做一定的请求合并。

减少请求数据的大小：对于post请求，body可以做gzip压缩的，header也可以做数据压缩(不过只支持http 2.0)。
返回数据的body也可以做gzip压缩，body数据体积可以缩小到原来的30%左右。（也可以考虑压缩返回的json数据的key数据的体积，尤其是针对返回数据格式变化不大的情况，支付宝聊天返回的数据用到了）
根据用户的当前的网络质量来判断下载什么质量的图片（电商用的比较多）
顶




网络数据优化，数据库优化，内存优化，设计模式，广播的使用，一些常用算法，常用的API，线程和UI交互，


APP 冷启动和热启动----区别是不是系统已有该应用的进程















